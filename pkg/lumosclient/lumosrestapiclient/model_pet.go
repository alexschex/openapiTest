/*
Sample API

Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// Pet A pet you have
type Pet struct {
	BasicPet *BasicPet
	Cat *Cat
	Dog *Dog
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Pet) UnmarshalJSON(data []byte) error {
	var err error
	// use discriminator value to speed up the lookup
	var jsonDict map[string]interface{}
	err = json.Unmarshal(data, &jsonDict)
	if err != nil {
		return fmt.Errorf("Failed to unmarshal JSON into map for the discriminator lookup.")
	}

	// check if the discriminator value is 'BasicPet'
	if jsonDict["type"] == "BasicPet" {
		// try to unmarshal JSON data into BasicPet
		err = json.Unmarshal(data, &dst.BasicPet);
		if err == nil {
			jsonBasicPet, _ := json.Marshal(dst.BasicPet)
			if string(jsonBasicPet) == "{}" { // empty struct
				dst.BasicPet = nil
			} else {
				return nil // data stored in dst.BasicPet, return on the first match
			}
		} else {
			dst.BasicPet = nil
		}
	}

	// check if the discriminator value is 'Cat'
	if jsonDict["type"] == "Cat" {
		// try to unmarshal JSON data into Cat
		err = json.Unmarshal(data, &dst.Cat);
		if err == nil {
			jsonCat, _ := json.Marshal(dst.Cat)
			if string(jsonCat) == "{}" { // empty struct
				dst.Cat = nil
			} else {
				return nil // data stored in dst.Cat, return on the first match
			}
		} else {
			dst.Cat = nil
		}
	}

	// check if the discriminator value is 'Dog'
	if jsonDict["type"] == "Dog" {
		// try to unmarshal JSON data into Dog
		err = json.Unmarshal(data, &dst.Dog);
		if err == nil {
			jsonDog, _ := json.Marshal(dst.Dog)
			if string(jsonDog) == "{}" { // empty struct
				dst.Dog = nil
			} else {
				return nil // data stored in dst.Dog, return on the first match
			}
		} else {
			dst.Dog = nil
		}
	}

	// check if the discriminator value is 'Lizard'
	if jsonDict["type"] == "Lizard" {
		// try to unmarshal JSON data into BasicPet
		err = json.Unmarshal(data, &dst.BasicPet);
		if err == nil {
			jsonBasicPet, _ := json.Marshal(dst.BasicPet)
			if string(jsonBasicPet) == "{}" { // empty struct
				dst.BasicPet = nil
			} else {
				return nil // data stored in dst.BasicPet, return on the first match
			}
		} else {
			dst.BasicPet = nil
		}
	}

	// check if the discriminator value is 'Unicorn'
	if jsonDict["type"] == "Unicorn" {
		// try to unmarshal JSON data into BasicPet
		err = json.Unmarshal(data, &dst.BasicPet);
		if err == nil {
			jsonBasicPet, _ := json.Marshal(dst.BasicPet)
			if string(jsonBasicPet) == "{}" { // empty struct
				dst.BasicPet = nil
			} else {
				return nil // data stored in dst.BasicPet, return on the first match
			}
		} else {
			dst.BasicPet = nil
		}
	}

	// try to unmarshal JSON data into BasicPet
	err = json.Unmarshal(data, &dst.BasicPet);
	if err == nil {
		jsonBasicPet, _ := json.Marshal(dst.BasicPet)
		if string(jsonBasicPet) == "{}" { // empty struct
			dst.BasicPet = nil
		} else {
			return nil // data stored in dst.BasicPet, return on the first match
		}
	} else {
		dst.BasicPet = nil
	}

	// try to unmarshal JSON data into Cat
	err = json.Unmarshal(data, &dst.Cat);
	if err == nil {
		jsonCat, _ := json.Marshal(dst.Cat)
		if string(jsonCat) == "{}" { // empty struct
			dst.Cat = nil
		} else {
			return nil // data stored in dst.Cat, return on the first match
		}
	} else {
		dst.Cat = nil
	}

	// try to unmarshal JSON data into Dog
	err = json.Unmarshal(data, &dst.Dog);
	if err == nil {
		jsonDog, _ := json.Marshal(dst.Dog)
		if string(jsonDog) == "{}" { // empty struct
			dst.Dog = nil
		} else {
			return nil // data stored in dst.Dog, return on the first match
		}
	} else {
		dst.Dog = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(Pet)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *Pet) MarshalJSON() ([]byte, error) {
	if src.BasicPet != nil {
		return json.Marshal(&src.BasicPet)
	}

	if src.Cat != nil {
		return json.Marshal(&src.Cat)
	}

	if src.Dog != nil {
		return json.Marshal(&src.Dog)
	}

	return nil, nil // no data in anyOf schemas
}

type NullablePet struct {
	value *Pet
	isSet bool
}

func (v NullablePet) Get() *Pet {
	return v.value
}

func (v *NullablePet) Set(val *Pet) {
	v.value = val
	v.isSet = true
}

func (v NullablePet) IsSet() bool {
	return v.isSet
}

func (v *NullablePet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePet(val *Pet) *NullablePet {
	return &NullablePet{value: val, isSet: true}
}

func (v NullablePet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


