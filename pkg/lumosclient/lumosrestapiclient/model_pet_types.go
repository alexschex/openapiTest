/*
Sample API

Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// PetTypes Type of pet
type PetTypes string

// List of PetTypes
const (
	PETTYPES_LIZARD PetTypes = "Lizard"
	PETTYPES_UNICORN PetTypes = "Unicorn"
	PETTYPES_DOG PetTypes = "Dog"
	PETTYPES_CAT PetTypes = "Cat"
)

// All allowed values of PetTypes enum
var AllowedPetTypesEnumValues = []PetTypes{
	"Lizard",
	"Unicorn",
	"Dog",
	"Cat",
}

func (v *PetTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PetTypes(value)
	for _, existing := range AllowedPetTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PetTypes", value)
}

// NewPetTypesFromValue returns a pointer to a valid PetTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPetTypesFromValue(v string) (*PetTypes, error) {
	ev := PetTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PetTypes: valid values are %v", v, AllowedPetTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PetTypes) IsValid() bool {
	for _, existing := range AllowedPetTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PetTypes value
func (v PetTypes) Ptr() *PetTypes {
	return &v
}

type NullablePetTypes struct {
	value *PetTypes
	isSet bool
}

func (v NullablePetTypes) Get() *PetTypes {
	return v.value
}

func (v *NullablePetTypes) Set(val *PetTypes) {
	v.value = val
	v.isSet = true
}

func (v NullablePetTypes) IsSet() bool {
	return v.isSet
}

func (v *NullablePetTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePetTypes(val *PetTypes) *NullablePetTypes {
	return &NullablePetTypes{value: val, isSet: true}
}

func (v NullablePetTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePetTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

