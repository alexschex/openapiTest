/*
Sample API

Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.

API version: 0.1.9
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BasicPet struct for BasicPet
type BasicPet struct {
	// name of the pet
	Name string `json:"name"`
	Type PetTypes `json:"type"`
	// age of the pet
	Age int32 `json:"age"`
}

// NewBasicPet instantiates a new BasicPet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicPet(name string, type_ PetTypes, age int32) *BasicPet {
	this := BasicPet{}
	this.Name = name
	this.Type = type_
	this.Age = age
	return &this
}

// NewBasicPetWithDefaults instantiates a new BasicPet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicPetWithDefaults() *BasicPet {
	this := BasicPet{}
	return &this
}

// GetName returns the Name field value
func (o *BasicPet) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BasicPet) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BasicPet) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *BasicPet) GetType() PetTypes {
	if o == nil {
		var ret PetTypes
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BasicPet) GetTypeOk() (*PetTypes, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BasicPet) SetType(v PetTypes) {
	o.Type = v
}

// GetAge returns the Age field value
func (o *BasicPet) GetAge() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Age
}

// GetAgeOk returns a tuple with the Age field value
// and a boolean to check if the value has been set.
func (o *BasicPet) GetAgeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Age, true
}

// SetAge sets field value
func (o *BasicPet) SetAge(v int32) {
	o.Age = v
}

func (o BasicPet) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["age"] = o.Age
	}
	return json.Marshal(toSerialize)
}

type NullableBasicPet struct {
	value *BasicPet
	isSet bool
}

func (v NullableBasicPet) Get() *BasicPet {
	return v.value
}

func (v *NullableBasicPet) Set(val *BasicPet) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicPet) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicPet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicPet(val *BasicPet) *NullableBasicPet {
	return &NullableBasicPet{value: val, isSet: true}
}

func (v NullableBasicPet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicPet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


